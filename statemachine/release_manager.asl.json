{
    "Comment": "A state machine that does multiple pipeling releases.",
    "StartAt": "Read Manifest",
    "States": {
        "Read Manifest": {
            "Type": "Task",
            "Resource": "${CheckManifestFunctionArn}",
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 15,
                    "MaxAttempts": 5,
                    "BackoffRate": 1.5
                }
            ],
            "Next": "Manifest Valid?"
        },
        "Manifest Valid?": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.steps",
                    "NumericGreaterThan": 0,
                    "Next": "Run Pipelines"
                },
                {
                    "Variable": "$.error",
                    "StringGreaterThan": "",
                    "Next": "Error in Manifest"
                }
            ],
            "Default": "Nothing To Do"
        },
        "Nothing To Do": {
            "Type": "Pass",
            "End": true
        },
        "Error in Manifest": {
            "Type": "Fail"
        },
        "Run Pipelines": {
            "Type": "Map",
            "InputPath": "$.manifest",
            "ItemsPath": "$.pipelines",
            "MaxConcurrency": 20,
            "ResultPath": "$.manifest.pipelines",
            "Parameters": {
                "pipeline.$": "$$.Map.Item.Value",
                "releaseId.$": "$.releaseId"
            },
            "Iterator": {
                "StartAt": "Run Pipeline",
                "States": {
                    "Run Pipeline": {
                        "Type": "Task",
                        "Resource": "${RunPipelineFunctionArn}",
                        "Next": "Check Pipeline Execution"
                    },
                    "Check Pipeline Execution": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Variable": "$.error",
                                "StringEquals": "",
                                "Next": "Pipeline Ok"
                            },
                            {
                                "Variable": "$.error",
                                "StringGreaterThan": "",
                                "Next": "Pipeline Error"
                            }
                        ],
                        "Default": "Pipeline Error"
                    },
                    "Pipeline Error": {
                        "Type": "Fail"
                    },
                    "Pipeline Ok": {
                        "Type": "Succeed"
                    }
                }
            },
            "Next": "Wait for Pipelines"
        },
        "Wait for Pipelines": {
            "Type": "Wait",
            "Seconds": 30,
            "Next": "Check Pipelines"
        },
        "Check Pipelines": {
            "Type": "Task",
            "Resource": "${CheckPipelinesFunctionArn}",
            "Next": "Pipelines Done?"
        },
        "Pipelines Done?": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.releaseStatus",
                    "StringEquals": "IN_PROGRESS",
                    "Next": "Wait for Pipelines"
                },
                {
                    "Variable": "$.releaseStatus",
                    "StringEquals": "FAILED",
                    "Next": "Failed"
                },
                {
                    "Variable": "$.releaseStatus",
                    "StringEquals": "COMPLETED",
                    "Next": "Record Release"
                }
            ],
            "Default": "Wait for Pipelines"
        },
        "Record Release": {
            "Type": "Task",
            "Resource": "${DDBUpdatetem}",
            "Parameters": {
                "TableName": "${DDBTable}",
                "Key": {
                    "ReleaseId": {
                        "S.$": "$.releaseId"
                    }
                },
                "UpdateExpression": "SET #new = :ts",
                "ExpressionAttributeValues": {
                    ":ts.$": "$.releaseTimestamp"
                },
                "ExpressionAttributeNames": {
                    "#new.$": "$.releaseStatus"
                },
                "ReturnValues": "UPDATED_NEW"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 20,
                    "MaxAttempts": 5,
                    "BackoffRate": 10
                }
            ],
            "Next": "Succeeded"
        },
        "Succeeded": {
            "Type": "Succeed"
        },
        "Failed": {
            "Type": "Fail"
        }
    }
}